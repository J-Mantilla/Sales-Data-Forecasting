import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose
import warnings
warnings.filterwarnings("ignore")

# Load the preprocessed train data
train_data = pd.read_csv('processed_train_data.csv', parse_dates=['Date'], index_col='Date')

# 1. School and State Holidays
plt.figure(figsize=(10, 6))
sns.countplot(x='SchoolHoliday', data=train_data)
plt.title('Count of School Holidays')
plt.xlabel('School Holiday')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='StateHoliday', data=train_data)
plt.title('Count of State Holidays')
plt.xlabel('State Holiday')
plt.ylabel('Count')
plt.show()

# 2. Seasonality
monthly_sales = train_data.groupby('Month')['Sales'].sum()
plt.figure(figsize=(12, 6))
sns.lineplot(x=monthly_sales.index, y=monthly_sales.values)
plt.title('Monthly Sales Trend')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.grid(True)
plt.show()

result = seasonal_decompose(train_data['Sales'], model='additive', period=365)
result.plot()
plt.show()

# 3. Locality
plt.figure(figsize=(12, 6))
sns.boxplot(x='StoreType', y='Sales', data=train_data)
plt.title('Sales Distribution by Store Type')
plt.xlabel('Store Type')
plt.ylabel('Sales')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='Assortment', data=train_data)
plt.title('Count of Store Assortment Types')
plt.xlabel('Assortment Type')
plt.ylabel('Count')
plt.show()

# 4. Sales Over Time (6 weeks)
plt.figure(figsize=(14, 7))
plt.plot(train_data.index, train_data['Sales'], label='Daily Sales', color='blue')
plt.title('Sales Trend Over Time')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.grid(True)
plt.show()

# 5. Sales per Week - Average Sales per Week
weekly_sales = train_data['Sales'].resample('W').mean()
plt.figure(figsize=(12, 6))
sns.lineplot(x=weekly_sales.index, y=weekly_sales.values)
plt.title('Average Sales per Week')
plt.xlabel('Week')
plt.ylabel('Average Sales')
plt.grid(True)
plt.show()

# 6. Weekday Sales (Monday - Sunday)
avg_sales_by_day = train_data.groupby('DayOfWeek')['Sales'].mean()

# Map numbers to day names
day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

# Plot the barplot
plt.figure(figsize=(10, 6))
sns.barplot(x=avg_sales_by_day.index, y=avg_sales_by_day.values)
plt.title('Average Sales by Day of the Week')
plt.xlabel('Day of the Week')
plt.ylabel('Average Sales')

# Replace x-axis labels with day names
plt.xticks(ticks=range(len(day_names)), labels=day_names)

plt.grid(True)
plt.show()

# 7. Sales per Day, Customers per Day, and Sales per Customers per Day
daily_sales = train_data.groupby('Date')['Sales'].sum()
plt.figure(figsize=(14, 7))
plt.plot(daily_sales.index, daily_sales.values, label='Sales per Day', color='blue')
plt.title('Sales per Day')
plt.xlabel('Date')
plt.ylabel('Sales in millions')
plt.legend()
plt.grid(True)
plt.show()

daily_customers = train_data.groupby('Date')['Customers'].sum()
plt.figure(figsize=(14, 7))
plt.plot(daily_customers.index, daily_customers.values, label='Customers per Day', color='green')
plt.title('Customers per Day')
plt.xlabel('Date')
plt.ylabel('Customers in millions')
plt.legend()
plt.grid(True)
plt.show()

train_data['SalesPerCustomer'] = train_data['Sales'] / train_data['Customers']
daily_sales_per_customer = train_data.groupby('Date')['SalesPerCustomer'].mean()
plt.figure(figsize=(14, 7))
plt.plot(daily_sales_per_customer.index, daily_sales_per_customer.values, label='Sales per Customers per Day', color='purple')
plt.title('Sales per Customers per Day')
plt.xlabel('Date')
plt.ylabel('Sales per Customers')
plt.legend()
plt.grid(True)
plt.show()

# cleaning sales forecast csv generated by machine learning model and perofrming EDA

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt

# Load the data from GitHub raw URL
file_url = "https://raw.githubusercontent.com/infinadox/Sales-Data-Forecasting/main/Random_Forest_v2/sales_forecast_after_2015-07-31.csv"
data = pd.read_csv(file_url)

# Display the first few rows of the original data
print("Original Data:")
print(data.head())

# Step 1: Handle missing values
data_cleaned = data.dropna()  # Drop rows with missing values

# Step 2: Remove duplicates
data_cleaned = data_cleaned.drop_duplicates()

# Step 3: Ensure 'Date' column is in datetime format
data_cleaned['Date'] = pd.to_datetime(data_cleaned['Date'], errors='coerce')

# Step 4: Remove rows with invalid dates (if any)
data_cleaned = data_cleaned.dropna(subset=['Date'])

# Step 5: Sort data by date
data_cleaned = data_cleaned.sort_values(by='Date')

# Display the cleaned data
print("\nCleaned Data:")
print(data_cleaned.head())

# Plot 1: Total Forecast Sales by Day
daily_sales = data_cleaned.groupby('Date')['Forecast Sales'].sum().reset_index()

plt.figure(figsize=(14, 7))
plt.bar(daily_sales['Date'], daily_sales['Forecast Sales'], color='skyblue')
plt.title('Total Forecast Sales by Day (Cleaned Data)')
plt.xlabel('Date')
plt.ylabel('Total Forecast Sales')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot 2: Average Forecast Sales per Week
weekly_sales = data_cleaned.resample('W-Mon', on='Date')['Forecast Sales'].mean().reset_index().sort_values(by='Date')

plt.figure(figsize=(14, 7))
plt.bar(weekly_sales['Date'], weekly_sales['Forecast Sales'], color='skyblue')
plt.title('Average Forecast Sales per Week (Cleaned Data)')
plt.xlabel('Week')
plt.ylabel('Average Forecast Sales')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

